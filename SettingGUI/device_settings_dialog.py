# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'device_settings.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QDialog
from config import Device_Configuration, Default_Device_Configuration
from Logic.Threads.device_configThread import DeviceConfigThread


class Ui_Settings_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(916, 600)
        Dialog.setMinimumSize(QtCore.QSize(800, 600))
        self.verticalLayout = QtWidgets.QVBoxLayout(Dialog)
        self.verticalLayout.setObjectName("verticalLayout")
        self.groupBox_5 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_5.setObjectName("groupBox_5")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.groupBox_5)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.label_5 = QtWidgets.QLabel(self.groupBox_5)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_8.addWidget(self.label_5)
        self.comboBox_config_id_list = QtWidgets.QComboBox(self.groupBox_5)
        self.comboBox_config_id_list.setObjectName("comboBox_config_id_list ")
        self.verticalLayout_8.addWidget(self.comboBox_config_id_list)
        self.verticalLayout_9.addLayout(self.verticalLayout_8)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.label_3 = QtWidgets.QLabel(self.groupBox_5)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_6.addWidget(self.label_3)
        self.lineEdit_base_diameter = QtWidgets.QLineEdit(self.groupBox_5)
        self.lineEdit_base_diameter.setText("")
        self.lineEdit_base_diameter.setObjectName("lineEdit_base_diameter")
        self.verticalLayout_6.addWidget(self.lineEdit_base_diameter)
        self.verticalLayout_9.addLayout(self.verticalLayout_6)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.label_4 = QtWidgets.QLabel(self.groupBox_5)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_7.addWidget(self.label_4)
        self.lineEdit_tenzo_update_rate = QtWidgets.QLineEdit(self.groupBox_5)
        self.lineEdit_tenzo_update_rate.setObjectName("lineEdit_tenzo_update_rate")
        self.verticalLayout_7.addWidget(self.lineEdit_tenzo_update_rate)
        self.verticalLayout_9.addLayout(self.verticalLayout_7)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.groupBox_6 = QtWidgets.QGroupBox(self.groupBox_5)
        self.groupBox_6.setObjectName("groupBox_6")
        self.verticalLayout_31 = QtWidgets.QVBoxLayout(self.groupBox_6)
        self.verticalLayout_31.setObjectName("verticalLayout_31")
        self.verticalLayout_21 = QtWidgets.QVBoxLayout()
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.label_8 = QtWidgets.QLabel(self.groupBox_6)
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.verticalLayout_21.addWidget(self.label_8)
        self.lineEdit_start_base_motor_speed = QtWidgets.QLineEdit(self.groupBox_6)
        self.lineEdit_start_base_motor_speed.setObjectName("lineEdit_start_base_motor_speed")
        self.verticalLayout_21.addWidget(self.lineEdit_start_base_motor_speed)
        self.verticalLayout_31.addLayout(self.verticalLayout_21)
        self.verticalLayout_23 = QtWidgets.QVBoxLayout()
        self.verticalLayout_23.setObjectName("verticalLayout_23")
        self.label_14 = QtWidgets.QLabel(self.groupBox_6)
        self.label_14.setAlignment(QtCore.Qt.AlignCenter)
        self.label_14.setObjectName("label_14")
        self.verticalLayout_23.addWidget(self.label_14)
        self.lineEdit_base_acceleration = QtWidgets.QLineEdit(self.groupBox_6)
        self.lineEdit_base_acceleration.setObjectName("lineEdit_base_acceleration")
        self.verticalLayout_23.addWidget(self.lineEdit_base_acceleration)
        self.verticalLayout_31.addLayout(self.verticalLayout_23)
        self.verticalLayout_30 = QtWidgets.QVBoxLayout()
        self.verticalLayout_30.setObjectName("verticalLayout_30")
        self.label_15 = QtWidgets.QLabel(self.groupBox_6)
        self.label_15.setAlignment(QtCore.Qt.AlignCenter)
        self.label_15.setObjectName("label_15")
        self.verticalLayout_30.addWidget(self.label_15)
        self.lineEdit_base_MaxSpeed = QtWidgets.QLineEdit(self.groupBox_6)
        self.lineEdit_base_MaxSpeed.setObjectName("lineEdit_base_MaxSpeed")
        self.verticalLayout_30.addWidget(self.lineEdit_base_MaxSpeed)
        self.verticalLayout_31.addLayout(self.verticalLayout_30)
        self.horizontalLayout_7.addWidget(self.groupBox_6)
        self.groupBox_7 = QtWidgets.QGroupBox(self.groupBox_5)
        self.groupBox_7.setObjectName("groupBox_7")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.groupBox_7)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.verticalLayout_27 = QtWidgets.QVBoxLayout()
        self.verticalLayout_27.setObjectName("verticalLayout_27")
        self.label_12 = QtWidgets.QLabel(self.groupBox_7)
        self.label_12.setAlignment(QtCore.Qt.AlignCenter)
        self.label_12.setObjectName("label_12")
        self.verticalLayout_27.addWidget(self.label_12)
        self.lineEdit_start_stand_motor_speed = QtWidgets.QLineEdit(self.groupBox_7)
        self.lineEdit_start_stand_motor_speed.setObjectName("lineEdit_start_stand_motor_speed")
        self.verticalLayout_27.addWidget(self.lineEdit_start_stand_motor_speed)
        self.verticalLayout_5.addLayout(self.verticalLayout_27)
        self.verticalLayout_25 = QtWidgets.QVBoxLayout()
        self.verticalLayout_25.setObjectName("verticalLayout_25")
        self.label_16 = QtWidgets.QLabel(self.groupBox_7)
        self.label_16.setAlignment(QtCore.Qt.AlignCenter)
        self.label_16.setObjectName("label_16")
        self.verticalLayout_25.addWidget(self.label_16)
        self.lineEdit_head_acceleration = QtWidgets.QLineEdit(self.groupBox_7)
        self.lineEdit_head_acceleration.setObjectName("lineEdit_head_acceleration")
        self.verticalLayout_25.addWidget(self.lineEdit_head_acceleration)
        self.verticalLayout_5.addLayout(self.verticalLayout_25)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_17 = QtWidgets.QLabel(self.groupBox_7)
        self.label_17.setAlignment(QtCore.Qt.AlignCenter)
        self.label_17.setObjectName("label_17")
        self.verticalLayout_4.addWidget(self.label_17)
        self.lineEdit_head_MaxSpeed = QtWidgets.QLineEdit(self.groupBox_7)
        self.lineEdit_head_MaxSpeed.setObjectName("lineEdit_head_MaxSpeed")
        self.verticalLayout_4.addWidget(self.lineEdit_head_MaxSpeed)
        self.verticalLayout_5.addLayout(self.verticalLayout_4)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label = QtWidgets.QLabel(self.groupBox_7)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.lineEdit_head_returning_speed = QtWidgets.QLineEdit(self.groupBox_7)
        self.lineEdit_head_returning_speed.setObjectName("lineEdit_head_returning_speed")
        self.verticalLayout_2.addWidget(self.lineEdit_head_returning_speed)
        self.verticalLayout_5.addLayout(self.verticalLayout_2)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_2 = QtWidgets.QLabel(self.groupBox_7)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_3.addWidget(self.label_2)
        self.lineEdit_head_returning_acceleration = QtWidgets.QLineEdit(self.groupBox_7)
        self.lineEdit_head_returning_acceleration.setObjectName("lineEdit_head_returning_acceleration")
        self.verticalLayout_3.addWidget(self.lineEdit_head_returning_acceleration)
        self.verticalLayout_5.addLayout(self.verticalLayout_3)
        self.horizontalLayout_7.addWidget(self.groupBox_7)
        self.verticalLayout_9.addLayout(self.horizontalLayout_7)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_delete_device_settings = QtWidgets.QPushButton(self.groupBox_5)
        self.pushButton_delete_device_settings.setObjectName("pushButton_delete_device_settings")
        self.horizontalLayout.addWidget(self.pushButton_delete_device_settings)
        self.pushButton_change_device_settings = QtWidgets.QPushButton(self.groupBox_5)
        self.pushButton_change_device_settings.setObjectName("pushButton_change_device_settings")
        self.horizontalLayout.addWidget(self.pushButton_change_device_settings)
        self.verticalLayout_9.addLayout(self.horizontalLayout)
        self.verticalLayout.addWidget(self.groupBox_5)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Настройки установки"))
        self.groupBox_5.setTitle(_translate("Dialog", "Параметры установки(стандартные значения находятся в конфиге):"))
        self.label_5.setText(_translate("Dialog", "текущая конфигурация"))
        self.label_3.setText(_translate("Dialog", "диаметр основания"))
        self.label_4.setText(_translate("Dialog", "частота обновления тензодатчика"))
        self.groupBox_6.setTitle(_translate("Dialog", "Двигатель основания"))
        self.label_8.setText(_translate("Dialog", "начальная скорость вращения"))
        self.label_14.setText(_translate("Dialog", "ускорение"))
        self.label_15.setText(_translate("Dialog", "максимальная скорость"))
        self.groupBox_7.setTitle(_translate("Dialog", "Двигатель медиаотра"))
        self.label_12.setText(_translate("Dialog", "начальная скорость вращения"))
        self.label_16.setText(_translate("Dialog", "ускорение"))
        self.label_17.setText(_translate("Dialog", "максимальная скорость"))
        self.label.setText(_translate("Dialog", "Скорость возврата"))
        self.label_2.setText(_translate("Dialog", "Ускорение возврата"))
        self.pushButton_delete_device_settings.setText(_translate("Dialog", "Удалить конфигурацию"))
        self.pushButton_change_device_settings.setText(_translate("Dialog", "Обновить настройки"))


class Create_Settings_Dialog(QDialog, Ui_Settings_Dialog):
    def __init__(self):
        super().__init__()
        # self.threads = []
        self.setupUi(self)
        self.pushButton_delete_device_settings.setEnabled(False)
        self.pushButton_change_device_settings.setEnabled(False)
        self.pushButton_change_device_settings.clicked.connect(self.update_config)
        self.pushButton_delete_device_settings.clicked.connect(self.delete_current_config)
        self.set_fields_disable()
        self.download_config_id()

    def download_config_id(self):
        try:
            self.comboBox_config_id_list.currentTextChanged.disconnect(self.handle_combobox)
        except TypeError:
            pass
        self.comboBox_config_id_list.currentTextChanged.connect(self.handle_combobox)
        self.config_id_thread = DeviceConfigThread('getConfigsIDList')
        self.config_id_thread.update_signal.connect(self.update_config_list)
        self.config_id_thread.start()

    def update_config_list(self, id_list):
        if id_list is not None:
            self.comboBox_config_id_list.clear()
            self.comboBox_config_id_list.addItem('')
            self.comboBox_config_id_list.addItems(map(str, id_list))
            self.comboBox_config_id_list.addItem('create')
        else:
            self.comboBox_config_id_list.clear()
            self.comboBox_config_id_list.addItem('')
            self.comboBox_config_id_list.addItem('create')

    def update_config(self):
        self.set_fields_enable()
        self.connect_fields_clearing()
        try:
            self.pushButton_delete_device_settings.clicked.disconnect(self.delete_current_config)
        except TypeError:
            pass
        try:
            self.pushButton_delete_device_settings.clicked.connect(self.cancel_updating)
        except TypeError:
            pass

        try:
            self.pushButton_change_device_settings.clicked.disconnect(self.update_config)
        except TypeError:
            pass
        try:
            self.pushButton_change_device_settings.clicked.connect(self.confirm_updating)
        except TypeError:
            pass

        self.pushButton_change_device_settings.setText("Подтвердить новые настройки")
        self.pushButton_delete_device_settings.setText("Отменить изменения")

    def confirm_updating(self):
        current_config = Device_Configuration

        if self.is_float(self.lineEdit_base_diameter.text().strip()):
            current_config.base_diameter = float(self.lineEdit_base_diameter.text().strip())
        else:
            current_config.base_diameter = None

        if self.lineEdit_start_base_motor_speed.text().strip().isdigit():
            current_config.motor_speed_base = int(self.lineEdit_start_base_motor_speed.text().strip())
        else:
            current_config.motor_speed_base = None

        if self.lineEdit_base_acceleration.text().strip().isdigit():
            current_config.motor_accel_base = int(self.lineEdit_base_acceleration.text().strip())
        else:
            current_config.motor_accel_base = None

        if self.lineEdit_base_MaxSpeed.text().strip().isdigit():
            current_config.motor_MaxSpeed_base = int(self.lineEdit_base_MaxSpeed.text().strip())
        else:
            current_config.motor_MaxSpeed_base = None

        if self.lineEdit_start_stand_motor_speed.text().strip().isdigit():
            current_config.motor_speed_head = int(self.lineEdit_start_stand_motor_speed.text().strip())
        else:
            current_config.motor_speed_head = None

        if self.lineEdit_head_acceleration.text().strip().isdigit():
            current_config.motor_accel_head = int(self.lineEdit_head_acceleration.text().strip())
        else:
            current_config.motor_accel_head = None

        if self.lineEdit_head_MaxSpeed.text().strip().isdigit():
            current_config.motor_MaxSpeed_head = int(self.lineEdit_head_MaxSpeed.text().strip())
        else:
            current_config.motor_MaxSpeed_head = None

        if self.lineEdit_head_returning_speed.text().strip().isdigit():
            current_config.motor_returning_speed_head = int(self.lineEdit_head_returning_speed.text().strip())
        else:
            current_config.motor_returning_speed_head = None

        if self.lineEdit_head_returning_acceleration.text().strip().isdigit():
            current_config.motor_returning_accel_head = int(self.lineEdit_head_returning_acceleration.text().strip())
        else:
            current_config.motor_returning_accel_head = None

        if self.lineEdit_tenzo_update_rate.text().strip().isdigit():
            current_config.tenzo_update_rate_default = int(self.lineEdit_tenzo_update_rate.text().strip())
        else:
            current_config.tenzo_update_rate_default = None

        self.update_config_thread = DeviceConfigThread('update_current_config', current_config)
        self.update_config_thread.update_signal.connect(self.updating_result)
        self.update_config_thread.start()
        self.cancel_updating()
        self.download_config_id()

    def updating_result(self, result):
        if result:
            print("Succes updating")

        else:
            print("An error while updating")

    def cancel_updating(self):
        self.set_fields_disable()
        self.disconnect_fields_clearing()

        try:
            self.pushButton_delete_device_settings.clicked.disconnect(self.cancel_updating)
        except TypeError:
            pass
        try:
            self.pushButton_delete_device_settings.clicked.connect(self.delete_current_config)
        except TypeError:
            pass

        try:
            self.pushButton_change_device_settings.clicked.disconnect(self.confirm_updating)
        except TypeError:
            pass
        try:
            self.pushButton_change_device_settings.clicked.connect(self.update_config)
        except TypeError:
            pass

        self.pushButton_change_device_settings.setText("Обновить настройки")
        self.pushButton_delete_device_settings.setText("Удалить конфигурацию")

    def create_new_config(self):
        if hasattr(self, 'create_new_config_thread'):
            try:
                self.create_new_config_thread.update_signal.disconnect()
                self.create_new_config_thread.quit()
                self.create_new_config_thread.wait()
            except TypeError:
                pass
        current_config = Device_Configuration()
        if self.is_float(self.lineEdit_base_diameter.text().strip()):
            current_config.base_diameter = float(self.lineEdit_base_diameter.text().strip())
        else:
            current_config.base_diameter = None

        if self.lineEdit_start_base_motor_speed.text().strip().isdigit():
            current_config.motor_speed_base = int(self.lineEdit_start_base_motor_speed.text().strip())
        else:
            current_config.motor_speed_base = None

        if self.lineEdit_base_acceleration.text().strip().isdigit():
            current_config.motor_accel_base = int(self.lineEdit_base_acceleration.text().strip())
        else:
            current_config.motor_accel_base = None

        if self.lineEdit_base_MaxSpeed.text().strip().isdigit():
            current_config.motor_MaxSpeed_base = int(self.lineEdit_base_MaxSpeed.text().strip())
        else:
            current_config.motor_MaxSpeed_base = None

        if self.lineEdit_start_stand_motor_speed.text().strip().isdigit():
            current_config.motor_speed_head = int(self.lineEdit_start_stand_motor_speed.text().strip())
        else:
            current_config.motor_speed_head = None

        if self.lineEdit_head_acceleration.text().strip().isdigit():
            current_config.motor_accel_head = int(self.lineEdit_head_acceleration.text().strip())
        else:
            current_config.motor_accel_head = None

        if self.lineEdit_head_MaxSpeed.text().strip().isdigit():
            current_config.motor_MaxSpeed_head = int(self.lineEdit_head_MaxSpeed.text().strip())
        else:
            current_config.motor_MaxSpeed_head = None

        if self.lineEdit_head_returning_speed.text().strip().isdigit():
            current_config.motor_returning_speed_head = int(self.lineEdit_head_returning_speed.text().strip())
        else:
            current_config.motor_returning_speed_head = None

        if self.lineEdit_head_returning_acceleration.text().strip().isdigit():
            current_config.motor_returning_accel_head = int(self.lineEdit_head_returning_acceleration.text().strip())
        else:
            current_config.motor_returning_accel_head = None

        if self.lineEdit_tenzo_update_rate.text().strip().isdigit():
            current_config.tenzo_update_rate_default = int(self.lineEdit_tenzo_update_rate.text().strip())
        else:
            current_config.tenzo_update_rate_default = None

        self.create_new_config_thread = DeviceConfigThread('create_new_config', current_config)
        self.create_new_config_thread.update_signal.connect(self.creating_result)
        self.create_new_config_thread.start()

    def creating_result(self, response):
        if response:
            print("config added")
            self.cancel_creating()
        else:
            print("error adding config, try again")

    def handle_combobox(self):
        # self.clean_up_threads()
        if hasattr(self, 'get_current_config_thread'):
            try:
                self.get_current_config_thread.update_signal.disconnect(self.show_current_config)
            except TypeError:
                pass
        if self.comboBox_config_id_list.currentText().isdigit():
            self.pushButton_change_device_settings.setEnabled(True)
            self.pushButton_delete_device_settings.setEnabled(True)
            self.get_current_config_thread = DeviceConfigThread("get_current_config",
                                                                int(self.comboBox_config_id_list.currentText()))
            self.get_current_config_thread.update_signal.connect(self.show_current_config)
            self.get_current_config_thread.start()
        elif self.comboBox_config_id_list.currentText() == "create":
            self.pushButton_delete_device_settings.setEnabled(False)
            self.fill_new_config()
        else:
            self.pushButton_change_device_settings.setEnabled(False)
            self.pushButton_delete_device_settings.setEnabled(False)
            self.set_fields_disable()
            self.set_fields_default_config()

    def show_current_config(self,
                            config: Device_Configuration):  #здесь запускается цепочка проверок(не придумал как это сделать красивее, потоу что все обращения к бд происходят в отдельном потоке)
        #и если запускать процессы в одном методе то они могут происходить непоследовательно.
        #Идея заключается в том, чтобы сначала сбрасывать список текущих конфигураций, а затем делать переданный конфиг текущим
        #Конечно все можно было бы объединить в manager'е, но мне хочется, чтобы на всякий случай был раздельный функционал
        if hasattr(self, 'reset_current_configures'):
            try:
                self.reset_current_configures.update_signal.disconnect()
            except TypeError:
                pass
        self.reset_current_configures = DeviceConfigThread("reset_current_config")
        self.reset_current_configures.update_signal.connect(lambda result: self.on_reset_complete(config, result))
        self.reset_current_configures.start()

    def on_reset_complete(self, config, result):
        if result:
            if hasattr(self, 'make_conf_current_thread'):
                try:
                    self.make_conf_current_thread.update_signal.disconnect()
                except TypeError:
                    pass
            self.make_conf_current_thread = DeviceConfigThread("make_config_current", config.config_id)
            self.make_conf_current_thread.update_signal.connect(
                lambda result: self.on_make_current_complete(config, result))
            self.make_conf_current_thread.start()

        print(f"reset result = {result}")

    def on_make_current_complete(self, config, result):
        if result:
            self.lineEdit_tenzo_update_rate.setText(str(config.tenzo_update_rate))
            self.lineEdit_base_diameter.setText(str(config.base_diameter))
            self.lineEdit_start_base_motor_speed.setText(str(config.motor_speed_base))
            self.lineEdit_base_acceleration.setText(str(config.motor_accel_base))
            self.lineEdit_base_MaxSpeed.setText(str(config.motor_MaxSpeed_base))
            self.lineEdit_start_stand_motor_speed.setText(str(config.motor_speed_head))
            self.lineEdit_head_acceleration.setText(str(config.motor_accel_head))
            self.lineEdit_head_MaxSpeed.setText(str(config.motor_MaxSpeed_head))
            self.lineEdit_head_returning_speed.setText(str(config.motor_returning_speed_head))
            self.lineEdit_head_returning_acceleration.setText(str(config.motor_returning_accel_head))
        else:
            self.lineEdit_tenzo_update_rate.setText('')
            self.lineEdit_base_diameter.setText('')
            self.lineEdit_start_base_motor_speed.setText('')
            self.lineEdit_base_acceleration.setText('')
            self.lineEdit_base_MaxSpeed.setText('')
            self.lineEdit_start_stand_motor_speed.setText('')
            self.lineEdit_head_acceleration.setText('')
            self.lineEdit_head_MaxSpeed.setText('')
            self.lineEdit_head_returning_speed.setText('')
            self.lineEdit_head_returning_acceleration.setText('')
            print('an error in config process')

        print(f"making current = {result}")

    def delete_current_config(self):
        self.delete_thread = DeviceConfigThread('delete_current_config')
        self.delete_thread.update_signal.connect(self.deleting_status)
        self.delete_thread.start()
        self.download_config_id()

    def deleting_status(self, result):
        if result:
            print("succes deleting")
        else:
            print("an error occured durind deletion")

    def fill_new_config(self):
        try:
            self.comboBox_config_id_list.currentTextChanged.disconnect(self.handle_combobox)
        except TypeError:
            pass
        try:
            self.comboBox_config_id_list.currentTextChanged.connect(self.cancel_creating)
        except TypeError:
            pass
        self.set_fields_default_config()
        self.connect_fields_clearing()
        self.set_fields_enable()
        try:
            self.pushButton_change_device_settings.clicked.disconnect(self.update_config)
        except TypeError:
            pass
        try:
            self.pushButton_change_device_settings.clicked.connect(self.create_new_config)
        except TypeError:
            pass
        self.pushButton_change_device_settings.setEnabled(True)

    def cancel_creating(self):
        self.pushButton_change_device_settings.setEnabled(False)
        try:
            self.comboBox_config_id_list.currentTextChanged.disconnect(self.cancel_creating)
        except:
            pass
        try:
            self.comboBox_config_id_list.currentTextChanged.connect(self.handle_combobox)
        except:
            pass
        self.disconnect_fields_clearing()
        try:
            self.pushButton_change_device_settings.clicked.disconnect(self.create_new_config)
        except TypeError:
            pass
        try:
            self.pushButton_change_device_settings.clicked.connect(self.update_config)
        except TypeError:
            pass
        self.download_config_id()

    def set_fields_enable(self):
        self.lineEdit_tenzo_update_rate.setEnabled(True)
        self.lineEdit_base_diameter.setEnabled(True)
        self.lineEdit_start_base_motor_speed.setEnabled(True)
        self.lineEdit_base_acceleration.setEnabled(True)
        self.lineEdit_base_MaxSpeed.setEnabled(True)
        self.lineEdit_start_stand_motor_speed.setEnabled(True)
        self.lineEdit_head_acceleration.setEnabled(True)
        self.lineEdit_head_MaxSpeed.setEnabled(True)
        self.lineEdit_head_returning_speed.setEnabled(True)
        self.lineEdit_head_returning_acceleration.setEnabled(True)

    def set_fields_disable(self):
        self.lineEdit_tenzo_update_rate.setEnabled(False)
        self.lineEdit_base_diameter.setEnabled(False)
        self.lineEdit_start_base_motor_speed.setEnabled(False)
        self.lineEdit_base_acceleration.setEnabled(False)
        self.lineEdit_base_MaxSpeed.setEnabled(False)
        self.lineEdit_start_stand_motor_speed.setEnabled(False)
        self.lineEdit_head_acceleration.setEnabled(False)
        self.lineEdit_head_MaxSpeed.setEnabled(False)
        self.lineEdit_head_returning_speed.setEnabled(False)
        self.lineEdit_head_returning_acceleration.setEnabled(False)

    def set_fields_default_config(self):
        self.lineEdit_tenzo_update_rate.setText(
            f"{Default_Device_Configuration.tenzo_update_rate_default}(дефолтное значение из конфига)")
        self.lineEdit_base_diameter.setText(
            f"{Default_Device_Configuration.base_diameter_default}(дефолтное значение из конфига)")
        self.lineEdit_start_base_motor_speed.setText(
            f"{Default_Device_Configuration.motor_speed_base_default}(дефолтное значение из конфига)")
        self.lineEdit_base_acceleration.setText(
            f"{Default_Device_Configuration.motor_accel_base_default}(дефолтное значение из конфига)")
        self.lineEdit_base_MaxSpeed.setText(
            f"{Default_Device_Configuration.motor_MaxSpeed_base_default}(дефолтное значение из конфига)")
        self.lineEdit_start_stand_motor_speed.setText(
            f"{Default_Device_Configuration.motor_speed_head_default}(дефолтное значение из конфига)")
        self.lineEdit_head_acceleration.setText(
            f"{Default_Device_Configuration.motor_accel_head_default}(дефолтное значение из конфига)")
        self.lineEdit_head_MaxSpeed.setText(
            f"{Default_Device_Configuration.motor_MaxSpeed_head_default}(дефолтное значение из конфига)")
        self.lineEdit_head_returning_speed.setText(
            f"{Default_Device_Configuration.motor_returning_speed_head_default}(дефолтное значение из конфига)")
        self.lineEdit_head_returning_acceleration.setText(
            f"{Default_Device_Configuration.motor_returning_accel_head_default}(дефолтное значение из конфига)")

    def connect_fields_clearing(self):
        self.lineEdit_tenzo_update_rate.cursorPositionChanged.connect(self.tenzo_update_clear)
        self.lineEdit_base_diameter.cursorPositionChanged.connect(self.base_diameter_clear)
        self.lineEdit_start_base_motor_speed.cursorPositionChanged.connect(self.start_base_motor_speed_clear)
        self.lineEdit_base_acceleration.cursorPositionChanged.connect(self.base_acceleration_clear)
        self.lineEdit_base_MaxSpeed.cursorPositionChanged.connect(self.base_MaxSpeed_clear)
        self.lineEdit_start_stand_motor_speed.cursorPositionChanged.connect(self.start_stand_motor_speed_clear)
        self.lineEdit_head_acceleration.cursorPositionChanged.connect(self.head_acceleration_clear)
        self.lineEdit_head_MaxSpeed.cursorPositionChanged.connect(self.head_MaxSpeed_clear)
        self.lineEdit_head_returning_speed.cursorPositionChanged.connect(self.head_returning_speed_clear)
        self.lineEdit_head_returning_acceleration.cursorPositionChanged.connect(self.head_returning_acceleration_clear)

    def disconnect_fields_clearing(self):
        try:
            self.lineEdit_tenzo_update_rate.cursorPositionChanged.disconnect(self.tenzo_update_clear)
        except TypeError:
            pass
        try:
            self.lineEdit_base_diameter.cursorPositionChanged.disconnect(self.base_diameter_clear)
        except TypeError:
            pass
        try:
            self.lineEdit_start_base_motor_speed.cursorPositionChanged.disconnect(self.start_base_motor_speed_clear)
        except TypeError:
            pass
        try:
            self.lineEdit_base_acceleration.cursorPositionChanged.disconnect(self.base_acceleration_clear)
        except TypeError:
            pass
        try:
            self.lineEdit_base_MaxSpeed.cursorPositionChanged.disconnect(self.base_MaxSpeed_clear)
        except TypeError:
            pass
        try:
            self.lineEdit_start_stand_motor_speed.cursorPositionChanged.disconnect(self.start_stand_motor_speed_clear)
        except TypeError:
            pass
        try:
            self.lineEdit_head_acceleration.cursorPositionChanged.disconnect(self.head_acceleration_clear)
        except TypeError:
            pass
        try:
            self.lineEdit_head_MaxSpeed.cursorPositionChanged.disconnect(self.head_MaxSpeed_clear)
        except TypeError:
            pass
        try:
            self.lineEdit_head_returning_speed.cursorPositionChanged.disconnect(self.head_returning_speed_clear)
        except TypeError:
            pass
        try:
            self.lineEdit_head_returning_acceleration.cursorPositionChanged.disconnect(
                self.head_returning_acceleration_clear)
        except TypeError:
            pass

    def tenzo_update_clear(self):
        try:
            self.lineEdit_tenzo_update_rate.clear()
            self.lineEdit_tenzo_update_rate.cursorPositionChanged.disconnect(self.tenzo_update_clear)
        except TypeError:
            pass

    def base_diameter_clear(self):
        try:
            self.lineEdit_base_diameter.clear()
            self.lineEdit_base_diameter.cursorPositionChanged.disconnect(self.base_diameter_clear)
        except TypeError:
            pass

    def start_base_motor_speed_clear(self):
        try:
            self.lineEdit_start_base_motor_speed.clear()
            self.lineEdit_start_base_motor_speed.cursorPositionChanged.disconnect(self.start_base_motor_speed_clear)
        except TypeError:
            pass

    def base_acceleration_clear(self):
        try:
            self.lineEdit_base_acceleration.clear()
            self.lineEdit_base_acceleration.cursorPositionChanged.disconnect(self.base_acceleration_clear)
        except TypeError:
            pass

    def base_MaxSpeed_clear(self):
        try:
            self.lineEdit_base_MaxSpeed.clear()
            self.lineEdit_base_MaxSpeed.cursorPositionChanged.disconnect(self.base_MaxSpeed_clear)
        except TypeError:
            pass

    def start_stand_motor_speed_clear(self):
        try:
            self.lineEdit_start_stand_motor_speed.clear()
            self.lineEdit_start_stand_motor_speed.cursorPositionChanged.disconnect(self.start_stand_motor_speed_clear)
        except TypeError:
            pass

    def head_acceleration_clear(self):
        try:
            self.lineEdit_head_acceleration.clear()
            self.lineEdit_head_acceleration.cursorPositionChanged.disconnect(self.head_acceleration_clear)
        except TypeError:
            pass

    def head_MaxSpeed_clear(self):
        try:
            self.lineEdit_head_MaxSpeed.clear()
            self.lineEdit_head_MaxSpeed.cursorPositionChanged.disconnect(self.head_MaxSpeed_clear)
        except TypeError:
            pass

    def head_returning_speed_clear(self):
        try:
            self.lineEdit_head_returning_speed.clear()
            self.lineEdit_head_returning_speed.cursorPositionChanged.disconnect(self.head_returning_speed_clear)
        except TypeError:
            pass

    def head_returning_acceleration_clear(self):
        try:
            self.lineEdit_head_returning_acceleration.clear()
            self.lineEdit_head_returning_acceleration.cursorPositionChanged.disconnect(
                self.head_returning_acceleration_clear)
        except TypeError:
            pass

    def is_float(self, string):
        try:
            float(string)
            return True
        except ValueError:
            return False

    # def clean_up_threads(self):
    #     # Удаляем завершенные потоки из списка
    #     self.threads = [thread for thread in self.threads if thread.isRunning()]
